/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/ext_power.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/rgb.h>

#define HYPER LC(LS(LG(LALT)))

#define D1 &mt UNDERSCORE COMMA                   // , when tapped, _ when  held
#define D2 &mt PIPE EQUAL                         // = when tapped, | when  held
#define D3 &mt EXCLAMATION DOT                    // . when tapped, ! when  held
#define D4 &mt SEMI COLON                         // : when tapped, ; when  held
#define D5 &mt AMPS DOLLAR                        // $ when tapped, & when  held
#define D6 &mt SINGLE_QUOTE DOUBLE_QUOTES         // ' when tapped, " when  held
#define D7 &mt LESS_THAN LEFT_BRACE               // { when tapped, < when  held
#define D8 &mt LEFT_BRACKET LEFT_PARENTHESIS      // ) when tapped, ] when  held
#define D9 &mt RIGHT_BRACKET RIGHT_PARENTHESIS    // ( when tapped, [ when  held
#define D10 &mt GREATER_THAN RIGHT_BRACE          // } when tapped, > when  held
#define D11 &mt CARET TILDE                       // ^ when tapped, ~ when  held
#define D12 &mt EXCLAMATION QUESTION              // ? when tapped, ! when  held
#define D13 &mt GRAVE HASH                        // # when tapped, ` when  held
#define D14 &mt ASTERISK KP_PLUS                  // + when tapped, * when  held
#define D15 &mt SLASH KP_MINUS                    // - when tapped, / when  held
#define D16 &kp KP_SLASH                          // / when tapped
#define D17 &kp BACKSLASH                         // \ when tapped

// layers
#define DEFAULT                0
#define QWERTZ                 1
#define DOVRAK_LEFTHAND        2
#define DOVRAK                 3
#define DOVRAK_SWITCH          4
#define DOVRAK_LOWER           5
#define DOVRAK_INVERTED        6
#define DOVRAK_LOWER_INVERTED  7
#define UTIL                   8
#define MAGIC                  9
//#define FACTORY_TEST 8

&mt {
    tapping-term-ms = <200>;
};

/ {
    behaviors {
        // For the "layer" key, it'd nice to be able to use it as either a shift or a toggle.
        // Configure it as a tap dance, so the first tap (or hold) is a &mo and the second tap is a &to
        // unused atm
        layer_td: tap_dance_0 {
            compatible = "zmk,behavior-tap-dance";
            label = "LAYER_TAP_DANCE";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&mo DOVRAK>, <&tog DOVRAK>;
        };

//        ld_dov: tap_dance_1 {
//            compatible = "zmk,behavior-tap-dance";
//            label = "LAYER_TAP_DANCE2";
//            #binding-cells = <0>;
//            tapping-term-ms = <200>;
//            bindings = <&mo DOVRAK>, <&tog DOVRAK>;
//        };

        S0: S0 {
                    compatible = "zmk,behavior-mod-morph";
                    #binding-cells = <0>;
                    bindings = <&kp ESC>, <&caps_word>;
                    mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        S1: S1   { compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>; bindings = <&kp COMMA>             , <&kp UNDERSCORE>      ; mods = <(MOD_LSFT|MOD_RSFT)>; };
        S2: S2   { compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>; bindings = <&kp EQUAL>             , <&kp PIPE>            ; mods = <(MOD_LSFT|MOD_RSFT)>; };
        S3: S3   { compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>; bindings = <&kp DOT>               , <&kp EXCLAMATION>     ; mods = <(MOD_LSFT|MOD_RSFT)>; };
        S4: S4   { compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>; bindings = <&kp COLON>             , <&kp SEMI>            ; mods = <(MOD_LSFT|MOD_RSFT)>; };
        S5: S5   { compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>; bindings = <&kp DOLLAR>            , <&kp AMPS>            ; mods = <(MOD_LSFT|MOD_RSFT)>; };
        S6: S6   { compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>; bindings = <&kp DOUBLE_QUOTES>     , <&kp SINGLE_QUOTE>    ; mods = <(MOD_LSFT|MOD_RSFT)>; };
        S7: S7   { compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>; bindings = <&kp LEFT_BRACE>        , <&kp LESS_THAN>       ; mods = <(MOD_LSFT|MOD_RSFT)>; };
        S8: S8   { compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>; bindings = <&kp LEFT_PARENTHESIS>  , <&kp LEFT_BRACKET>    ; mods = <(MOD_LSFT|MOD_RSFT)>; };
        S9: S9   { compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>; bindings = <&kp RIGHT_PARENTHESIS> , <&kp RIGHT_BRACKET>   ; mods = <(MOD_LSFT|MOD_RSFT)>; };
        S10: S10 { compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>; bindings = <&kp RIGHT_BRACE>       , <&kp GREATER_THAN>    ; mods = <(MOD_LSFT|MOD_RSFT)>; };
        S11: S11 { compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>; bindings = <&kp TILDE>             , <&kp CARET>           ; mods = <(MOD_LSFT|MOD_RSFT)>; };
        S12: S12 { compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>; bindings = <&kp QUESTION>          , <&kp EXCLAMATION>     ; mods = <(MOD_LSFT|MOD_RSFT)>; };
        S13: S13 { compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>; bindings = <&kp HASH>              , <&kp GRAVE>           ; mods = <(MOD_LSFT|MOD_RSFT)>; };
        S14: S14 { compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>; bindings = <&kp KP_PLUS>           , <&kp ASTERISK>        ; mods = <(MOD_LSFT|MOD_RSFT)>; };
        S15: S15 { compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>; bindings = <&kp KP_MINUS>          , <&kp SLASH>           ; mods = <(MOD_LSFT|MOD_RSFT)>; };





        magic: magic_hold_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "MAGIC_HOLD_TAP";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <200>;
            bindings = <&mo>, <&rgb_ug_status_macro>;
        };
    };

    macros {
        rgb_ug_status_macro: rgb_ug_status_macro_0 {
            label = "RGB_UG_STATUS";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&rgb_ug RGB_STATUS>;
        };

        bt_0: bt_profile_macro_0 {
            label = "BT_0";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 0>;
        };

        bt_1: bt_profile_macro_1 {
            label = "BT_1";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 1>;
        };

        bt_2: bt_profile_macro_2 {
            label = "BT_2";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 2>;
        };

        bt_3: bt_profile_macro_3 {
            label = "BT_3";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 3>;
        };
         //DOVRAK KEYS
         DTEST: DTEST {
             compatible = "zmk,behavior-macro";
             #binding-cells = <0>;
             bindings =
                <D1>,
                <D2>,
                <D3>,
                <D4>,
                <D5>,
                <D6>,
                <D7>,
                <D8>,
                <D9>,
                <D10>,
                <D11>,
                <D12>,
                <D13>,
                <D14>,
                <D15>,
                <D16>,
                <D17>;
         };
         default_layers: default_layers {
                      compatible = "zmk,behavior-macro";
                      #binding-cells = <0>;
                      bindings
                        = <&tog QWERTZ>
                        , <&tog DOVRAK>
                        , <&tog DOVRAK_SWITCH>
                        ;
                  };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // ----------------------------------------------------------------------------------------------------------------------------------------------
            // |            |     |     |      | F1 F2 |                                                         | F3 F4 | F5 F6 | F7 F8 | F9 F10 | F11 F12 |
            // |            |  1  |  2  |  3   | 4     | 5 |                                                 | 6 | 7     | 8     | 9     | 0      |         |
            // |  ESC       |     |     |      |       |   |                                                 |   |       |       |       |        |         |
            // |  TAB CAPS  |     |     |      |       |   |                                                 |   |       |       |       |        |         |
            // |            |     |     |      |       |   | LSHFT | LCTRL | LOWER | | LGUI  | RCTRL | RSHFT |   |       |       |       |        | PGUP    |
            // | MAGIC      | HOME| END | LEFT | RIGHT |   | BSPC  | DEL   | LALT  | | RALT  | RET   | SPACE |   | UP    | DOWN  |       |        | PGDN    |

            bindings = <
            &tog UTIL      &default_layers &tog DOVRAK_LEFTHAND         &kp INS     &mt F2 F1                                                                                      &mt F4 F3  &mt F6 F5      &mt F8 F7      &mt F10 F9     &mt F12 F11
            &none          &kp N1          &kp N2                       &kp N3      &kp N4      &kp N5                                                                     &kp N6  &kp N7     &kp N8         &kp N9         &kp N0         &none
            &kp ESC        &none           &none                        &none       &none       &none                                                                      &none   &none      &none          &none          &none          &none
            &kp TAB        &none           &none                        &none       &none       &none                                                                      &none   &none      &none          &none          &none          &none
            &none          &none           &none                        &none       &none       &none   &kp LSHFT   &kp LCTRL   &kp LGUI   &kp LGUI  &kp RCTRL &kp RSHFT   &none   &none      &none          &none          &none          &kp PG_UP
            &magic MAGIC 0 &kp HOME        &kp END                      &kp LEFT    &kp RIGHT           &kp BSPC    &kp DEL     &kp LALT   &kp LALT  &kp RET   &kp SPACE           &kp UP     &kp DOWN       &none          &none          &kp PG_DN
            >;
        };

        qwertz_layer {
            // -------------------------------------------------------------------------------------------------------------
            // |       |     |     |     |     |                                       |       |       |     |       |     |
            // |  =    |     |     |     |     |     |                          |      |       |       |     |       |  -  |
            // |       |  Q  |  W  |  E  |  R  |  T  |                          |  Y   |   U   |   I   |  O  |   P   |  \  |
            // |       |  A  |  S  |  D  |  F  |  G  |                          |  H   |   J   |   K   |  L  |   ;   |  '  |
            // |   `   |  Z  |  X  |  C  |  V  |  B  |  |   |   |   |   |   |   |  N   |   M   |   ,   |  .  |   /   |     |
            // |       |     |     |     |     |     |  |   |   |   |   |   |   |      |       |       |  [  |   ]   |     |

            bindings = <
            &trans      &trans      &trans      &trans      &trans                                                                      &trans      &trans      &trans      &trans      &trans
            &kp EQUAL   &trans      &trans      &trans      &trans      &trans                                                  &trans  &trans      &trans      &trans      &trans      &kp MINUS
            &trans      &kp Q       &kp W       &kp E       &kp R       &kp T                                                   &kp Z   &kp U       &kp I       &kp O       &kp P       &kp BSLH
            &trans      &kp A       &kp S       &kp D       &kp F       &kp G                                                   &kp H   &kp J       &kp K       &kp L       &kp SEMI    &kp SQT
            &trans      &kp Y       &kp X       &kp C       &kp V       &kp B   &trans  &trans  &trans  &trans  &trans  &trans  &kp N   &kp M       &kp COMMA   &kp DOT     &kp FSLH    &trans
            &trans      &trans      &trans      &trans      &trans              &trans  &trans  &trans  &trans  &trans  &trans          &trans      &trans      &kp LBKT    &kp RBKT    &trans
            >;
        };
        
        
        dovrak_inverted_switch {
           // ------------------------------------------------------------------------------
           // |    |   |   |   |   |                                   |   |   |   |   |   |
           // |    |   |   |   |   |   |                           |   |   |   |   |   |   |
           // |    |   |   |   |   |   |                           |   |   |   |   |   |   |
           // |    |   |   |   |   |   |                           |   |   |   |   |   |   |
           // |    |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |
           // |    |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |
           bindings = <
           &trans                &trans  &trans  &trans  &trans                                                                   &trans  &trans  &trans  &trans  &trans
           &trans                &trans  &trans  &trans  &trans  &trans                                                   &trans  &trans  &trans  &trans  &trans  &trans
           &trans                &trans  &trans  &trans  &trans  &trans                                                   &trans  &trans  &trans  &trans  &trans  &trans
           &trans                &trans  &trans  &trans  &trans  &trans                                                   &trans  &trans  &trans  &trans  &trans  &trans
           &mo DOVRAK_INVERTED   &trans  &trans  &trans  &trans  &trans  &trans  &trans &trans    &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
           &trans                &trans  &trans  &trans  &trans          &trans  &trans &kp SPACE &trans  &trans  &trans          &trans  &trans  &trans  &trans  &trans
           >;
        };

        dovrak_base_layer {
           // ----------------------------------------------------------------------------------------------------
           // |        |     |     |     |     |                                       |     |     |     |     |     |
           // |        |     |     |     |     |     |                           |     |     |     |     |     | ^ ~ |
           // |        | = | | $ & | .   | ; : | , _ |                           | " ' | { < | ( [ | ) ] | } > | ? ! |
           // |        | A   | O   | E   | U   | I   |                           | D   | H   | T   | N   | S   | # ` |
           // |        | Q   | P   | Y   |     | X   |   |   |   |   |   |   |   | F   | G   | C   | R   | L   |     |
           // |        |     |     |     |     |     |   |   |   |   |   |   |   |     |     |     | + * | - / |     |
           bindings = <
           &trans      &trans      &trans      &trans      &trans                                                                             &trans      &trans      &trans      &trans      &trans
           &none       &trans      &trans      &trans      &trans             &trans                                                  &trans  &trans      &trans      &trans      &trans      D11
           &trans      D1          D2          D3          D4                 D5                                                      D6      D7          D8          D9          D10         D12
           &trans      &kp A       &kp O       &kp E       &kp U              &kp I                                                   &kp D   &kp H       &kp T       &kp N       &kp S       D13
           &trans      &kp W       &kp P       &kp Y       &mo DOVRAK_LOWER   &kp M   &trans  &trans  &trans  &trans  &trans  &trans  &kp F   &kp G       &kp C       &kp R       &kp L       &trans
           &trans      &trans      &trans      &trans      &trans                     &trans  &trans  &trans  &trans  &trans  &trans          &trans      &trans      D14         D15         &trans
          >;
        };

        dovrak_switch {
           // ------------------------------------------------------------------------------
           // |    |   |   |   |   |                                   |   |   |   |   |   |
           // |    |   |   |   |   |   |                           |   |   |   |   |   |   |
           // |    |   |   |   |   |   |                           |   |   |   |   |   |   |
           // |    |   |   |   |   |   |                           |   |   |   |   |   |   |
           // |    |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |
           // |    |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |
           bindings = <
           &trans  &trans  &trans  &trans  &trans                                                                  &trans  &trans  &trans  &trans  &trans
           &trans  &trans  &trans  &trans  &trans  &trans                                                  &trans  &trans  &trans  &trans  &trans  &S11
           &trans  &S1     &S2     &S3     &S4     &S5                                                     &S6     &S7     &S8     &S9     &S10    &S12
           &trans  &trans  &trans  &trans  &trans  &trans                                                  &trans  &trans  &trans  &trans  &trans  &S13
           &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
           &trans  &trans  &trans  &trans  &trans          &trans  &trans  &trans  &trans  &trans  &trans          &trans  &trans  &S14    &S15    &trans
           >;
        };
        dovrak_base_layer_2 {
           // ----------------------------------------------------------------------------------------------------
           // |    |        |           |        |   |                                         |        |           |      |     |     |
           // |    |        |           |        |   |   |                           |         |        |           |      |     |     |
           // |    | actions| dupli     | save   |   |   |                           | crtl F4 |        |  /        |  \   |     |     |
           // |    | l-edit | undo      | copy   |   |   |                           |         |        | run       |format| ß   |     |
           // |    | crtl x |  J        |  K     |   |ins|   |   |   |   |   |   |   | B       | X      | V         | Q    | Z   |     |
           // |    | ä Ä    | ö Ö       | ü Ü    |   |   |   |   |   |   |   |   |   |         |        |           |      |     |     |
             bindings = <
           &trans      &trans           &trans            &trans            &trans                                                                                         &trans           &trans           &trans        &trans         &trans
           &trans      &trans           &trans            &trans            &trans   &trans                                                             &trans             &trans           &trans           &trans        &trans         &trans
           &trans      &kp LC(LS(BSPC)) &kp LC(D)         &kp LC(S)         &trans   &trans                                                             &kp LC(F4)         &trans           D16              D17           &trans         &trans
           &kp CAPS    &kp LC(X)        &kp LC(Z)         &kp LC(C)         &trans   &kp LG(LS(S))                                                      &trans             &trans           &kp LC(LS(F10))  &trans        &trans         &trans
           &caps_word  &kp B            &kp J             &kp K             &none    &kp LC(V)  &kp LC(F) &kp LC(R) &kp LC(X)  &trans  &trans  &trans   &kp B              &kp X            &kp V            &kp Q         &kp Z          &trans
           &trans      &trans           &kp UP            &kp DOWN          &none               &kp SPACE &kp RET   &trans     &trans  &trans  &kp TAB                     &trans           &trans           &trans        &trans         &trans
          >;
        };

        dovrak_base_layer_inverted {
           bindings = <
           &mt F4 F3   &mt F6 F5   &mt F8 F7   &mt F10 F9  &mt F12 F11                                                                               &trans  &trans  &trans  &trans  &trans
           D11         &kp N0      &kp N9      &kp N8      &kp N7                     &kp N6                                                 &trans  &trans  &trans  &trans  &trans  &trans
           D13         D12         D10         D9          D8                         D7                                                     &trans  &trans  &trans  &trans  &trans  &trans
           &trans      &kp S       &kp N       &kp T       &kp H                      &kp D                                                  &trans  &trans  &trans  &trans  &trans  &trans
           &trans      &kp L       &kp R       &kp C       &mo DOVRAK_LOWER_INVERTED  &kp F   &trans &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
           &trans      D15         D14         &kp UP      &kp DOWN                           &trans &trans  &trans  &trans  &trans  &trans          &trans  &trans  &trans  &trans  &trans
          >;
        };

        dovrak_base_layer_2_inverted {

           bindings = <
           &trans      &trans           &trans            &trans     &trans                                                                          &trans  &trans  &trans  &trans  &trans
           &trans      &trans           &trans            &trans     &trans   &trans                                                         &trans  &trans  &trans  &trans  &trans  &trans
           &trans      &trans           D16               D17        &trans   &kp LC(LS(F10))                                                &trans  &trans  &trans  &trans  &trans  &trans
           &trans      &kp LC(X)        &kp LC(Z)         &kp LC(C)  &trans   &kp LG(LS(S))                                                  &trans  &trans  &trans  &trans  &trans  &trans
           &trans      &kp X            &kp B             &kp G      &none    &kp LC(V)  &trans    &trans    &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
           &trans      &kp Q            &kp V             &kp Z      &trans              &trans    &trans    &trans  &trans  &trans  &trans          &trans  &trans  &trans  &trans  &trans
          >;
        };

         util_layer {
            // -----------------------------------------------------------------------------------------------------
            // |   |   |   |   |   |                                                           |   |   |   |   |   |
            // |   |   |   |   |   |   |                                                   |   |   |   |   |   |   |
            // |   |   |   |   |   |   |                                                   |   |   |   |   |   |   |
            // |   |   |   |   |   |   |                                                   |   |   |   |   |   |   |
            // |   |   |   |   |   |   | LSHFT |          |   | |   |              | RSHFT |   |   |   |   |   |   |
            // |   |   |   |   |   |   |       | DEL      |   | |   | CRTL-Z Enter |       |   |   |   |   |   |   |
            bindings = <
            &trans  &trans  &trans    &trans    &trans                                                                                   &trans  &trans  &trans     &trans           &trans
            &trans  &trans  &trans    &trans    &trans    &trans                                                              &trans     &trans  &trans  &trans     &trans           &trans
            &trans  &none   &kp HOME  &kp UP    &kp END   &kp PG_UP                                                           &kp COLON  &kp N7  &kp N8  &kp N9     &kp KP_PLUS      &none
            &trans  &none   &kp LEFT  &kp DOWN  &kp RIGHT &kp PG_DN                                                           &kp DOT    &kp N4  &kp N5  &kp N6     &kp KP_MINUS     &none
            &trans  &none   &none     &none     &none     &none   &trans      &trans      &trans  &trans  &trans  &trans      &kp N0     &kp N1  &kp N2  &kp N3     &kp KP_MULTIPLY  &none
            &trans  &none   &none     &none     &none             &trans      &trans      &trans  &trans  &trans  &trans                 &none   &none   &kp EQUAL  &kp KP_DIVIDE    &none
            >;
         };

        magic_layer {
            bindings = <
            &bt BT_CLR        &none               &none           &none           &none                                                                                                           &none      &none      &none      &none      &bt BT_CLR_ALL
            &none             &tog 1              &tog 2          &tog 3          &tog 4          &tog 5                                                                               &tog 6     &tog 7     &tog 8     &tog 9     &tog 1      &none
            &none             &rgb_ug RGB_SPI     &rgb_ug RGB_SAI &rgb_ug RGB_HUI &rgb_ug RGB_BRI &rgb_ug RGB_TOG                                                                      &none      &none      &none      &none      &none      &none
            &bootloader       &rgb_ug RGB_SPD     &rgb_ug RGB_SAD &rgb_ug RGB_HUD &rgb_ug RGB_BRD &rgb_ug RGB_EFF                                                                      &none      &none      &none      &none      &none      &bootloader
            &sys_reset        &none               &none           &none           &none           &none           &bt_2     &bt_3     &none            &none     &none     &none       &none      &none      &none      &none      &none      &sys_reset
            &none             &none               &none           &none           &none                           &bt_0     &bt_1     &out OUT_USB     &none     &none     &none                  &none      &none      &none      &none      &none
            >;
        };
        factory_test_layer {
            bindings = <
            &kp N0   &kp N6   &kp N2   &kp N8   &kp N4                                                                              &kp N4   &kp N8   &kp N2   &kp N6   &kp N0
            &kp N1   &kp N7   &kp N3   &kp N9   &kp N5   &kp N0                                                            &kp N0   &kp N5   &kp N9   &kp N3   &kp N7   &kp N1
            &kp N2   &kp N8   &kp N4   &kp N0   &kp N6   &kp N1                                                            &kp N1   &kp N6   &kp N0   &kp N4   &kp N8   &kp N2
            &kp N3   &kp N9   &kp N5   &kp N1   &kp N7   &kp N2                                                            &kp N2   &kp N7   &kp N1   &kp N5   &kp N9   &kp N3
            &kp N4   &kp N0   &kp N6   &kp N2   &kp N8   &kp N3   &kp N4   &kp N5   &kp N6      &kp N6   &kp N5   &kp N4   &kp N3   &kp N8   &kp N2   &kp N6   &kp N0   &kp N4
            &kp N5   &kp N1   &kp N7   &kp N3   &kp N9            &kp N7   &kp N8   &kp N9      &kp N9   &kp N8   &kp N7            &kp N9   &kp N3   &kp N7   &kp N1   &kp N5
            >;
        };
            // Template for new layer
        trans_layer {
           // ------------------------------------------------------------------------------
           // |    |   |   |   |   |                                   |   |   |   |   |   |
           // |    |   |   |   |   |   |                           |   |   |   |   |   |   |
           // |    |   |   |   |   |   |                           |   |   |   |   |   |   |
           // |    |   |   |   |   |   |                           |   |   |   |   |   |   |
           // |    |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |
           // |    |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |
           bindings = <
           &trans  &trans  &trans  &trans  &trans                                                                  &trans  &trans  &trans  &trans  &trans
           &trans  &trans  &trans  &trans  &trans  &trans                                                  &trans  &trans  &trans  &trans  &trans  &trans
           &trans  &trans  &trans  &trans  &trans  &trans                                                  &trans  &trans  &trans  &trans  &trans  &trans
           &trans  &trans  &trans  &trans  &trans  &trans                                                  &trans  &trans  &trans  &trans  &trans  &trans
           &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
           &trans  &trans  &trans  &trans  &trans          &trans  &trans  &trans  &trans  &trans  &trans          &trans  &trans  &trans  &trans  &trans
           >;
        };

    };
};
