/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/ext_power.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/rgb.h>

#define HYPER LC(LA(LSHFT))

#define D1 &mt UNDERSCORE COMMA                   // , when tapped, _ when  held
#define D2 &mt PIPE EQUAL                         // = when tapped, | when  held
#define D3 &mt EXCLAMATION DOT                    // . when tapped, ! when  held
#define D4 &mt SEMI COLON                         // : when tapped, ; when  held
#define D5 &mt AMPS DOLLAR                        // $ when tapped, & when  held
#define D6 &mt SINGLE_QUOTE DOUBLE_QUOTES         // ' when tapped, " when  held
#define D7 &mt LESS_THAN LEFT_BRACE               // { when tapped, < when  held
#define D8 &mt LEFT_BRACKET LEFT_PARENTHESIS      // ) when tapped, ] when  held
#define D9 &mt RIGHT_BRACKET RIGHT_PARENTHESIS    // ( when tapped, [ when  held
#define D10 &mt GREATER_THAN RIGHT_BRACE          // } when tapped, > when  held
#define D11 &mt CARET TILDE                       // ^ when tapped, ~ when  held
#define D12 &mt EXCLAMATION QUESTION              // ? when tapped, ! when  held
#define D13 &mt GRAVE HASH                        // # when tapped, ` when  held
#define D14 &mt ASTERISK KP_PLUS                  // + when tapped, * when  held
#define D15 &mt SLASH KP_MINUS                    // - when tapped, / when  held
#define D16 &kp KP_SLASH                          // / when tapped
#define D17 &kp BACKSLASH                         // \ when tapped

// layers
#define DEFAULT                0
#define DOVRAK                 1
#define DOVRAK_ENGRAM          2
#define DOVRAK_INVERTED        3
#define DOVRAK_LOWER_INVERTED  4
#define UTIL                   5
#define MACRO_LAYER            6
#define MAGIC                  7
//#define FACTORY_TEST 8

// 0
// 1
// 2
// 3
// 4
// 5
// 6
// 7
// 8
// 9

// bindings = <
// &0     &1     &2     &3     &4                                                             &5     &6     &7     &8     &9
// &10    &11    &12    &13    &14    &15                                              &16    &17    &18    &19    &20    &21
// &22    &23    &24    &25    &26    &27                                              &28    &29    &30    &31    &32    &33
// &34    &35    &36    &37    &38    &39                                              &40    &41    &42    &43    &44    &45
// &46    &47    &48    &49    &50    &51    &52    &53    &54    &55    &56    &57    &58    &59    &60    &61    &62    &63
// &64    &65    &66    &67    &68           &69    &70    &71    &72    &73    &74           &75    &76    &77    &78    &79
// >;

&mt {
//    flavor = "tap-preferred";
    tapping-term-ms = <200>;
};

/ {
    behaviors {
        // For the "layer" key, it'd nice to be able to use it as either a shift or a toggle.
        // Configure it as a tap dance, so the first tap (or hold) is a &mo and the second tap is a &to
        // unused atm
        layer_td: tap_dance_0 {
            compatible = "zmk,behavior-tap-dance";
            label = "LAYER_TAP_DANCE";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&mo DOVRAK>, <&tog DOVRAK>;
        };

        hml: home_row_mod_left {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            require-prior-idle-ms = <150>;
            tapping-term-ms = <180>;
            quick-tap-ms = <125>;
            bindings = <&kp>, <&kp>;
            hold-trigger-key-positions = <5>,<6>,<7>,<8>,<9>,<16>,<17>,<18>,<19>,<20>,<21>,<28>,<29>,<30>,<31>,<32>,<33>,<40>,<41>,<42>,<43>,<44>,<45>,<59>,<60>,<61>,<62>,<63>,<75>,<76>,<77>,<78>,<79>; // List of keys on the right side of the keyboard
            hold-trigger-on-release;
        };
        hmr: home_row_mod_right {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            require-prior-idle-ms = <150>;
            tapping-term-ms = <180>;
            quick-tap-ms = <125>;
            bindings = <&kp>, <&kp>;
            hold-trigger-key-positions = <0>,<1>,<2>,<3>,<4>,<10>,<11>,<12>,<13>,<14>,<15>,<22>,<23>,<24>,<25>,<26>,<27>,<34>,<35>,<36>,<37>,<38>,<39>,<46>,<47>,<48>,<49>,<50>,<51>,<64>,<65>,<66>,<67>,<68>;// List of keys on the left side of the keyboard
            hold-trigger-on-release;
        };

//        ld_dov: tap_dance_1 {
//            compatible = "zmk,behavior-tap-dance";
//            label = "LAYER_TAP_DANCE2";
//            #binding-cells = <0>;
//            tapping-term-ms = <200>;
//            bindings = <&mo DOVRAK>, <&tog DOVRAK>;
//        };

        S0: S0 {
                    compatible = "zmk,behavior-mod-morph";
                    #binding-cells = <0>;
                    bindings = <&kp ESC>, <&caps_word>;
                    mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        S1: S1   { compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>; bindings = <&kp COMMA>             , <&kp UNDERSCORE>      ; mods = <(MOD_LSFT|MOD_RSFT)>; };
        S2: S2   { compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>; bindings = <&kp EQUAL>             , <&kp PIPE>            ; mods = <(MOD_LSFT|MOD_RSFT)>; };
        S3: S3   { compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>; bindings = <&kp DOT>               , <&kp EXCLAMATION>     ; mods = <(MOD_LSFT|MOD_RSFT)>; };
        S4: S4   { compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>; bindings = <&kp COLON>             , <&kp SEMI>            ; mods = <(MOD_LSFT|MOD_RSFT)>; };
        S5: S5   { compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>; bindings = <&kp DOLLAR>            , <&kp AMPS>            ; mods = <(MOD_LSFT|MOD_RSFT)>; };
        S6: S6   { compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>; bindings = <&kp DOUBLE_QUOTES>     , <&kp SINGLE_QUOTE>    ; mods = <(MOD_LSFT|MOD_RSFT)>; };
        S7: S7   { compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>; bindings = <&kp LEFT_BRACE>        , <&kp LESS_THAN>       ; mods = <(MOD_LSFT|MOD_RSFT)>; };
        S8: S8   { compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>; bindings = <&kp LEFT_PARENTHESIS>  , <&kp LEFT_BRACKET>    ; mods = <(MOD_LSFT|MOD_RSFT)>; };
        S9: S9   { compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>; bindings = <&kp RIGHT_PARENTHESIS> , <&kp RIGHT_BRACKET>   ; mods = <(MOD_LSFT|MOD_RSFT)>; };
        S10: S10 { compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>; bindings = <&kp RIGHT_BRACE>       , <&kp GREATER_THAN>    ; mods = <(MOD_LSFT|MOD_RSFT)>; };
        S11: S11 { compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>; bindings = <&kp TILDE>             , <&kp CARET>           ; mods = <(MOD_LSFT|MOD_RSFT)>; };
        S12: S12 { compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>; bindings = <&kp QUESTION>          , <&kp EXCLAMATION>     ; mods = <(MOD_LSFT|MOD_RSFT)>; };
        S13: S13 { compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>; bindings = <&kp HASH>              , <&kp GRAVE>           ; mods = <(MOD_LSFT|MOD_RSFT)>; };
        S14: S14 { compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>; bindings = <&kp KP_PLUS>           , <&kp ASTERISK>        ; mods = <(MOD_LSFT|MOD_RSFT)>; };
        S15: S15 { compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>; bindings = <&kp KP_MINUS>          , <&kp SLASH>           ; mods = <(MOD_LSFT|MOD_RSFT)>; };

        // S7 & S8 ([{<
        C1:  C1    { compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>; bindings = <&kp LEFT_PARENTHESIS>   , <&C1A>              ; mods = <(MOD_LSFT|MOD_RSFT|MOD_LCTL|MOD_RCTL|MOD_LALT|MOD_RALT)>; keep-mods = <(MOD_LCTL|MOD_RCTL|MOD_LALT|MOD_RALT)>; };
        C1A: C1A   { compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>; bindings = <&kp LEFT_BRACKET>       , <&C1B>              ; mods = <(                  MOD_LCTL|MOD_RCTL|MOD_LALT|MOD_RALT)>; keep-mods = <(                  MOD_LALT|MOD_RALT)>; };
        C1B: C1B   { compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>; bindings = <&kp LEFT_BRACE>         , <&kp LESS_THAN>     ; mods = <(                                    MOD_LALT|MOD_RALT)>;                                                      };
        // S9 & S10 )]}>
        C2:  C2    { compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>; bindings = <&kp RIGHT_PARENTHESIS>  , <&C2A>             ; mods = <(MOD_LSFT|MOD_RSFT|MOD_LCTL|MOD_RCTL|MOD_LALT|MOD_RALT)>; keep-mods = <(MOD_LCTL|MOD_RCTL|MOD_LALT|MOD_RALT)>; };
        C2A: C2A   { compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>; bindings = <&kp RIGHT_BRACKET>      , <&C2B>             ; mods = <(                  MOD_LCTL|MOD_RCTL|MOD_LALT|MOD_RALT)>; keep-mods = <(                  MOD_LALT|MOD_RALT)>; };
        C2B: C2B   { compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>; bindings = <&kp RIGHT_BRACE>        , <&kp GREATER_THAN> ; mods = <(                                    MOD_LALT|MOD_RALT)>;                                                      };

        // ^~#
        C3:  C3    { compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>; bindings = <&kp CARET>              , <&C3A>             ; mods = <(MOD_LSFT|MOD_RSFT|MOD_LCTL|MOD_RCTL|MOD_LALT|MOD_RALT)>; keep-mods = <(MOD_LCTL|MOD_RCTL|MOD_LALT|MOD_RALT)>; };
        C3A: C3A   { compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>; bindings = <&kp TILDE>              , <&C3B>             ; mods = <(                  MOD_LCTL|MOD_RCTL|MOD_LALT|MOD_RALT)>; keep-mods = <(                  MOD_LALT|MOD_RALT)>; };
        C3B: C3B   { compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>; bindings = <&kp HASH>               , <&kp HASH>         ; mods = <(                                    MOD_LALT|MOD_RALT)>;                                                      };

        // !?&|
        C4:  C4    { compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>; bindings = <&kp EXCLAMATION>        , <&C4A>             ; mods = <(MOD_LSFT|MOD_RSFT|MOD_LCTL|MOD_RCTL|MOD_LALT|MOD_RALT)>; keep-mods = <(MOD_LCTL|MOD_RCTL|MOD_LALT|MOD_RALT)>; };
        C4A: C4A   { compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>; bindings = <&kp QUESTION>           , <&C4B>             ; mods = <(                  MOD_LCTL|MOD_RCTL|MOD_LALT|MOD_RALT)>; keep-mods = <(                  MOD_LALT|MOD_RALT)>; };
        C4B: C4B   { compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>; bindings = <&kp AMPS>               , <&kp PIPE>         ; mods = <(                                    MOD_LALT|MOD_RALT)>;                                                      };

        // .=,_
        C5:  C5    { compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>; bindings = <&kp DOT>                , <&C5A>             ; mods = <(MOD_LSFT|MOD_RSFT|MOD_LCTL|MOD_RCTL|MOD_LALT|MOD_RALT)>; keep-mods = <(MOD_LCTL|MOD_RCTL|MOD_LALT|MOD_RALT)>; };
        C5A: C5A   { compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>; bindings = <&kp EQUAL>              , <&C5B>             ; mods = <(                  MOD_LCTL|MOD_RCTL|MOD_LALT|MOD_RALT)>; keep-mods = <(                  MOD_LALT|MOD_RALT)>; };
        C5B: C5B   { compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>; bindings = <&kp COMMA>              , <&kp UNDERSCORE>   ; mods = <(                                    MOD_LALT|MOD_RALT)>;                                                      };

        // :;$
        C6:  C6    { compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>; bindings = <&kp SEMI>               , <&C6A>             ; mods = <(MOD_LSFT|MOD_RSFT|MOD_LCTL|MOD_RCTL|MOD_LALT|MOD_RALT)>; keep-mods = <(MOD_LCTL|MOD_RCTL|MOD_LALT|MOD_RALT)>; };
        C6A: C6A   { compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>; bindings = <&kp COLON>              , <&C6B>             ; mods = <(                  MOD_LCTL|MOD_RCTL|MOD_LALT|MOD_RALT)>; keep-mods = <(                  MOD_LALT|MOD_RALT)>; };
        C6B: C6B   { compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>; bindings = <&kp DOLLAR>             , <&kp DOLLAR>       ; mods = <(                                    MOD_LALT|MOD_RALT)>;                                                      };

        // "'`#
        C7:  C7    { compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>; bindings = <&kp DOUBLE_QUOTES>      , <&C7A>             ; mods = <(MOD_LSFT|MOD_RSFT|MOD_LCTL|MOD_RCTL|MOD_LALT|MOD_RALT)>; keep-mods = <(MOD_LCTL|MOD_RCTL|MOD_LALT|MOD_RALT)>; };
        C7A: C7A   { compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>; bindings = <&kp SINGLE_QUOTE>       , <&C7B>             ; mods = <(                  MOD_LCTL|MOD_RCTL|MOD_LALT|MOD_RALT)>; keep-mods = <(                  MOD_LALT|MOD_RALT)>; };
        C7B: C7B   { compatible = "zmk,behavior-mod-morph"; #binding-cells = <0>; bindings = <&kp GRAVE>              , <&kp HASH>         ; mods = <(                                    MOD_LALT|MOD_RALT)>;                                                      };


        magic: magic_hold_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "MAGIC_HOLD_TAP";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <200>;
            bindings = <&mo>, <&rgb_ug_status_macro>;
        };
    };

    macros {
        rgb_ug_status_macro: rgb_ug_status_macro_0 {
            label = "RGB_UG_STATUS";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&rgb_ug RGB_STATUS>;
        };

        bt_0: bt_profile_macro_0 {
            label = "BT_0";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 0>;
        };

        bt_1: bt_profile_macro_1 {
            label = "BT_1";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 1>;
        };

        bt_2: bt_profile_macro_2 {
            label = "BT_2";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 2>;
        };

        bt_3: bt_profile_macro_3 {
            label = "BT_3";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 3>;
        };
         //DOVRAK KEYS
         DTEST: DTEST {
             compatible = "zmk,behavior-macro";
             #binding-cells = <0>;
             bindings =
                <D1>,
                <D2>,
                <D3>,
                <D4>,
                <D5>,
                <D6>,
                <D7>,
                <D8>,
                <D9>,
                <D10>,
                <D11>,
                <D12>,
                <D13>,
                <D14>,
                <D15>,
                <D16>,
                <D17>;
         };
         default_layers: default_layers {
                      compatible = "zmk,behavior-macro";
                      #binding-cells = <0>;
                      bindings
                        = <&tog DOVRAK>
                        , <&tog DOVRAK_ENGRAM>
                        ;
                  };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // ----------------------------------------------------------------------------------------------------------------------------------------------
            // |            |     |     |      | F1 F2 |                                                         | F3 F4 | F5 F6 | F7 F8 | F9 F10 | F11 F12 |
            // |            |  1  |  2  |  3   | 4     | 5 |                                                 | 6 | 7     | 8     | 9     | 0      |         |
            // |  ESC       |     |     |      |       |   |                                                 |   |       |       |       |        |         |
            // |  TAB CAPS  |     |     |      |       |   |                                                 |   |       |       |       |        |         |
            // |            |     |     |      |       |   | LSHFT | LCTRL | LOWER | | LGUI  | RCTRL | RSHFT |   |       |       |       |        | PGUP    |
            // | MAGIC      | HOME| END | LEFT | RIGHT |   | BSPC  | DEL   | LALT  | | RALT  | RET   | SPACE |   | UP    | DOWN  |       |        | PGDN    |

            bindings = <
            &kp LC(C)      &kp LC(V)       &kp LS(INS)  &kp INS     &mt F2 F1                                                                                      &mt F4 F3  &mt F6 F5      &mt F8 F7      &mt F10 F9     &mt F12 F11
            &none          &kp N1          &kp N2       &kp N3      &kp N4      &kp N5                                                                     &kp N6  &kp N7     &kp N8         &kp N9         &kp N0         &none
            &kp ESC        &none           &none        &none       &none       &none                                                                      &none   &none      &none          &none          &none          &none
            &kp TAB        &none           &none        &none       &none       &none                                                                      &none   &none      &none          &none          &none          &none
            &none          &none           &none        &none       &none       &none   &kp LSHFT   &kp LCTRL   &kp LGUI   &kp LGUI  &kp RCTRL &kp RSHFT   &none   &none      &none          &none          &none          &kp PG_UP
            &magic MAGIC 0 &kp HOME        &kp END      &kp LEFT    &kp RIGHT           &kp BSPC    &kp DEL     &kp LALT   &kp LALT  &kp RET   &kp SPACE           &kp UP     &kp DOWN       &none          &none          &kp PG_DN
            >;
        };

        dovrak_base_layer {

           bindings = <
           &trans      &trans      &trans      &trans      &trans                                                                             &trans      &trans      &trans      &trans      &trans
           &none       &trans      &trans      &trans      &trans             &trans                                                  &trans  &trans      &trans      &trans      &trans      &kp Q
           &trans      &C3         &C4         &C5         &C6                &C7                                                     &kp B   &kp K       &C1         &C2         &kp J       &kp Z
           &trans      &kp A       &kp O       &kp E       &kp U              &kp I                                                   &kp D   &kp H       &kp T       &kp N       &kp S       &kp X
           &kp V       &kp W       &kp P       &kp Y       &mo MACRO_LAYER    &kp M   &trans  &trans  &trans  &trans  &trans  &trans  &kp F   &kp G       &kp C       &kp R       &kp L       &trans
           &trans      &trans      &trans      &trans      &trans                     &trans  &trans  &trans  &trans  &trans  &trans          &trans      &trans      &S14        &S15        &trans
          >;
        };

        dovrak_engramm_rows {

           bindings = <
           &trans  &trans  &trans        &trans         &trans                                                                            &trans         &trans         &trans       &trans  &trans
           &trans  &trans  &trans        &trans         &trans         &trans                                                     &trans  &trans         &trans         &trans       &trans  &trans
           &trans  &trans  &trans        &trans         &trans         &trans                                                     &trans  &trans         &trans         &trans       &trans  &trans
           &trans  &trans  &hml LALT O   &hml LCTRL E   &hml LSHFT U   &hml ESC I                                                 &trans  &hmr LSHFT H   &hmr LCTRL T   &hmr LALT N  &trans  &trans
           &trans  &trans  &trans        &hml HYPER Y   &trans         &trans    &trans  &trans  &trans  &trans  &trans  &trans   &trans  &trans         &hmr HYPER C   &trans       &trans  &trans
           &trans  &trans  &trans        &trans         &trans                   &trans  &trans  &trans  &trans  &trans  &trans           &trans         &trans         &trans       &trans  &trans
           >;
        };

        dovrak_base_layer_inverted {
           bindings = <
           &hmr F4 F3   &mt F6 F5   &mt F8 F7   &mt F10 F9  &mt F12 F11                                                                               &trans  &trans  &trans  &trans  &trans
           D11         &kp N0      &kp N9      &kp N8      &kp N7                     &kp N6                                                 &trans  &trans  &trans  &trans  &trans  &trans
           D13         D12         D10         D9          D8                         D7                                                     &trans  &trans  &trans  &trans  &trans  &trans
           &trans      &kp S       &kp N       &kp T       &kp H                      &kp D                                                  &trans  &trans  &trans  &trans  &trans  &trans
           &trans      &kp L       &kp R       &kp C       &mo DOVRAK_LOWER_INVERTED  &kp F   &trans &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
           &trans      D15         D14         &kp UP      &kp DOWN                           &trans &trans  &trans  &trans  &trans  &trans          &trans  &trans  &trans  &trans  &trans
          >;
        };

        dovrak_base_layer_2_inverted {

           bindings = <
           &trans      &trans           &trans            &trans     &trans                                                                          &trans  &trans  &trans  &trans  &trans
           &trans      &trans           &trans            &trans     &trans   &trans                                                         &trans  &trans  &trans  &trans  &trans  &trans
           &trans      &trans           D16               D17        &trans   &kp LC(LS(F10))                                                &trans  &trans  &trans  &trans  &trans  &trans
           &trans      &kp LC(X)        &kp LC(Z)         &kp LC(C)  &trans   &kp LG(LS(S))                                                  &trans  &trans  &trans  &trans  &trans  &trans
           &trans      &kp X            &kp B             &kp G      &none    &kp LC(V)  &trans    &trans    &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
           &trans      &kp Q            &kp V             &kp Z      &trans              &trans    &trans    &trans  &trans  &trans  &trans          &trans  &trans  &trans  &trans  &trans
          >;
        };

        util_layer {
           // -----------------------------------------------------------------------------------------------------
           // |   |   |   |   |   |                                                           |   |   |   |   |   |
           // |   |   |   |   |   |   |                                                   |   |   |   |   |   |   |
           // |   |   |   |   |   |   |                                                   |   |   |   |   |   |   |
           // |   |   |   |   |   |   |                                                   |   |   |   |   |   |   |
           // |   |   |   |   |   |   | LSHFT |          |   | |   |              | RSHFT |   |   |   |   |   |   |
           // |   |   |   |   |   |   |       | DEL      |   | |   | CRTL-Z Enter |       |   |   |   |   |   |   |
           bindings = <
           &trans  &trans  &trans    &trans    &trans                                                                                       &trans  &trans  &trans     &trans           &trans
           &trans  &trans  &trans    &trans    &trans            &trans                                                          &trans     &trans  &trans  &trans     &trans           &trans
           &trans  &none   &kp HOME  &kp UP    &kp END           &kp PG_UP                                                       &kp COLON  &kp N7  &kp N8  &kp N9     &kp KP_PLUS      &none
           &trans  &none   &kp LEFT  &kp DOWN  &kp RIGHT         &kp PG_DN                                                       &kp DOT    &kp N4  &kp N5  &kp N6     &kp KP_MINUS     &none
           &trans  &none   &none     &none     &mo MACRO_LAYER   &kp RALT  &trans    &trans  &trans  &trans  &trans  &trans      &kp N0     &kp N1  &kp N2  &kp N3     &kp KP_MULTIPLY  &none
           &trans  &none   &none     &none     &none                       &trans    &trans  &trans  &trans  &trans  &trans                 &none   &none   &kp EQUAL  &kp KP_DIVIDE    &none
           >;
        };

        macro_layer {
           // ----------------------------------------------------------------------------------------------------
           // |    |        |           |        |   |                                         |        |           |      |     |     |
           // |    |        |           |        |   |   |                           |         |        |           |      |     |     |
           // |    | actions| dupli     | save   |   |   |                           | crtl F4 |        |  /        |  \   |     |     |
           // |    | l-edit | undo      | copy   |   |   |                           |         |        | run       |format| ß   |     |
           // |    | crtl x |  J        |  K     |   |ins|   |   |   |   |   |   |   | B       | X      | V         | Q    | Z   |     |
           // |    | ä Ä    | ö Ö       | ü Ü    |   |   |   |   |   |   |   |   |   |         |        |           |      |     |     |
             bindings = <
           &trans      &trans           &trans            &trans            &trans                                                                                         &trans           &trans           &trans        &trans         &trans
           &trans      &trans           &trans            &trans            &trans   &trans                                                             &trans             &trans           &trans           &trans        &trans         &trans
           &trans      &kp LC(LS(BSPC)) &kp LC(D)         &kp LC(S)         &trans   &kp LG(LS(S))                                                      &kp LC(F4)         &none            D16              D17           &none          &trans
           &kp CAPS    &kp LC(X)        &kp LC(Z)         &kp LC(C)         &trans   &kp LC(C)                                                          &none              &none            &kp LC(LS(F10))  &none         &none          &trans
           &caps_word  &none            &kp J             &kp K             &none    &kp LC(V)  &kp LC(F) &kp LC(R) &kp LC(X)  &trans  &trans  &trans   &none              &none            &none            &none         &none          &trans
           &trans      &trans           &kp UP            &kp DOWN          &none               &kp SPACE &kp RET   &trans     &trans  &trans  &kp TAB                     &trans           &trans           &trans        &trans         &trans
          >;
        };

        magic_layer {
            bindings = <
            &bt BT_CLR        &none               &none           &none           &none                                                                                                           &none            &none           &none      &none      &bt BT_CLR_ALL
            &none             &tog 1              &tog 2          &tog 3          &tog 4          &tog 5                                                                               &tog 6     &tog 7           &tog 8          &tog 9     &tog 1     &none
            &none             &rgb_ug RGB_SPI     &rgb_ug RGB_SAI &rgb_ug RGB_HUI &rgb_ug RGB_BRI &rgb_ug RGB_TOG                                                                      &kp C_MUTE &kp C_VOL_DN     &kp C_VOL_UP    &kp C_NEXT &kp C_PREV &none
            &bootloader       &rgb_ug RGB_SPD     &rgb_ug RGB_SAD &rgb_ug RGB_HUD &rgb_ug RGB_BRD &rgb_ug RGB_EFF                                                                      &kp K_APP  &tog UTIL        &none           &none      &none      &bootloader
            &sys_reset        &none               &none           &none           &none           &none           &bt_2     &bt_3     &none            &none     &none     &none       &none      &default_layers  &none           &none      &none      &sys_reset
            &none             &none               &none           &none           &none                           &bt_0     &bt_1     &out OUT_USB     &none     &none     &none                  &none            &none           &none      &none      &none
            >;
        };
        factory_test_layer {
            bindings = <
            &kp N0   &kp N6   &kp N2   &kp N8   &kp N4                                                                              &kp N4   &kp N8   &kp N2   &kp N6   &kp N0
            &kp N1   &kp N7   &kp N3   &kp N9   &kp N5   &kp N0                                                            &kp N0   &kp N5   &kp N9   &kp N3   &kp N7   &kp N1
            &kp N2   &kp N8   &kp N4   &kp N0   &kp N6   &kp N1                                                            &kp N1   &kp N6   &kp N0   &kp N4   &kp N8   &kp N2
            &kp N3   &kp N9   &kp N5   &kp N1   &kp N7   &kp N2                                                            &kp N2   &kp N7   &kp N1   &kp N5   &kp N9   &kp N3
            &kp N4   &kp N0   &kp N6   &kp N2   &kp N8   &kp N3   &kp N4   &kp N5   &kp N6      &kp N6   &kp N5   &kp N4   &kp N3   &kp N8   &kp N2   &kp N6   &kp N0   &kp N4
            &kp N5   &kp N1   &kp N7   &kp N3   &kp N9            &kp N7   &kp N8   &kp N9      &kp N9   &kp N8   &kp N7            &kp N9   &kp N3   &kp N7   &kp N1   &kp N5
            >;
        };
            // Template for new layer
        trans_layer {
           // ------------------------------------------------------------------------------
           // |    |   |   |   |   |                                   |   |   |   |   |   |
           // |    |   |   |   |   |   |                           |   |   |   |   |   |   |
           // |    |   |   |   |   |   |                           |   |   |   |   |   |   |
           // |    |   |   |   |   |   |                           |   |   |   |   |   |   |
           // |    |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |
           // |    |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |
           bindings = <
           &trans  &trans  &trans  &trans  &trans                                                                  &trans  &trans  &trans  &trans  &trans
           &trans  &trans  &trans  &trans  &trans  &trans                                                  &trans  &trans  &trans  &trans  &trans  &trans
           &trans  &trans  &trans  &trans  &trans  &trans                                                  &trans  &trans  &trans  &trans  &trans  &trans
           &trans  &trans  &trans  &trans  &trans  &trans                                                  &trans  &trans  &trans  &trans  &trans  &trans
           &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
           &trans  &trans  &trans  &trans  &trans          &trans  &trans  &trans  &trans  &trans  &trans          &trans  &trans  &trans  &trans  &trans
           >;
        };

    };
};
